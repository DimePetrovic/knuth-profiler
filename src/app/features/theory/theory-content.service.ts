import { Injectable } from '@angular/core';
import { TheoryCard } from '../../core/theory/theory.model';

@Injectable({
  providedIn: 'root'
})
export class TheoryContentService {
  getCards(): TheoryCard[] {
    return [
      {
        id: 'uvod-rezime',
        title: 'Увод и резиме',
        body:
          'Ова страница представља Кнутов алгоритам профилирања у контексту верификације софтвера. ' +
          'Идеја је да се програм представи као граф тока управљања (CFG), да му се доделе тежине, ' +
          'изабере минималан скуп грана за инструментaцију, програм се покрене, а затим се из ' +
          'измерених података реконструишу проласци кроз све гране.'
      },
      {
        id: 'motivacija',
        title: 'Мотивација',
        body:
          'Профилисање нам омогућава да разумемо које делове кода програм заиста извршава и колико често. ' +
          'То помаже у приоритизацији тестова, откривању „врућих” путева, као и у оптимизацијама перформанси. ' +
          'Визуелизација овога чини процес провидним и едукативним.'
      },
      {
        id: 'pojmovnik-osnove',
        title: 'Формалне основе (мини појмовник)',
        body:
          '• Основни блок: секвенца наредби без гранања унутар блока.\n' +
          '• Чвор/ивица: чвор представља блок, ивица представља могући прелаз између блокова.\n' +
          '• Профил: број пролаза кроз ивице (или путеве) током извршавања програма.\n' +
          '• Улазна и излазна грана: посебне ивице које представљају улаз у програм и излаз из програма.'
      },
      {
        id: 'pregled-algoritma',
        title: 'Високи преглед алгоритма',
        body:
          '1) Конструише се CFG из постојећег кода.\n' +
          '2) Додељују се тежине ивицама (на основу правила/критеријума у пројекту).\n' +
          "3) Гради се минимално распрострањено стабло (MST) над CFG-ом (по нашим договореним правилима).\n" +
          '4) Бира се минималан скуп ивица за инструментaцију (на основу MST/правила).\n' +
          '5) Програм се покреће и прикупљају се бројачи.\n' +
          '6) Реконструишу се проласци кроз све ивице из ограниченог скупа мерења.'
      },
      {
        id: 'cfg-uvod',
        title: 'Конструисање CFG (увод)',
        body:
          'CFG (граф тока управљања) представља све могуће прелазе између блокова кода. ' +
          'У пракси, CFG може настати из изворног кода, интермедијарне репрезентације (IR) или бајткода. ' +
          'Овде дајемо кратак увод; детаљнија разматрања остављамо за самостално истраживање.'
      },
      {
        id: 'tezine-pre-mst',
        title: 'Додела тежина CFG-у',
        body:
          'Пре грађења MST-а, ивицама у CFG-у додељујемо тежине према договореним правилима (нпр. ' +
          'структурна сложеност гране, процена вероватноће, или други метрички критеријуми). ' +
          'У визуализацији, у овом кораку желимо јасан исказ „w=…“ на ивицама (без додатних ознака).'
      },
      {
        id: 'mst-gradnja',
        title: 'Градња MST над CFG',
        body:
          'Над додељеним тежинама градимо MST (нпр. Крускаловим или Примовим алгоритмом, по нашим правилима за CFG). ' +
          'Циљ нам је да добијемо базу ивица која ће касније помоћи у избору минималног скупа за инструментaцију.'
      },
      {
        id: 'instrumentacija',
        title: 'Инструментација: које ивице меримо',
        body:
          'Из скупа ивица у графу бира се минималан број „мерних” ивица тако да се из њихових бројача ' +
          'могу реконструисати све остале. Компромис је између тачности и укупног overhead-а у извршавању.'
      },
      {
        id: 'izvrsavanje',
        title: 'Сакупљање података у извршавању',
        body:
          'Након уметања бројача, програм се извршава. За свако покретање бележимо инкременте на изабраним ивицама. ' +
          'Важно је водити рачуна о иницијализацији бројача и понављаним покретањима.'
      },
      {
        id: 'rekonstrukcija',
        title: 'Реконструкција профила',
        body:
          'На основу измерених ивица, примењујемо правила/једначине тока да бисмо израчунали проласке кроз све ивице. ' +
          'Тако добијамо комплетан профил графа без мерења сваке ивице појединачно.'
      },
      {
        id: 'slozenost-opt',
        title: 'Сложеност и оптимизације',
        body:
          '• Конструисање CFG: линеарно у односу на број чворова/ивица (када имамо припремљену репрезентацију).\n' +
          '• MST: класични алгоритми који су ефикасни у пракси.\n' +
          '• Реконструкција: решавање система над графом; циљ је да буде што ређе и стабилно.'
      },
      {
        id: 'primena-verifikacija',
        title: 'Примена у верификацији',
        body:
          'Профили помажу у разумевању покривености и у приоритизацији тестова. ' +
          '„Врући“ путеви указују на делове кода критичне за понашање система.'
      },
      {
        id: 'ogranicenja',
        title: 'Ограничења и замке',
        body:
          'Неки токови (нпр. асинхрони и I/O тешки) могу отежати реконструкцију. ' +
          'Важно је да CFG и правила инструментaције буду доследни начину на који се програм заиста извршава.'
      },
      {
        id: 'dalje-citanje',
        title: 'Даље читање и појмовник',
        body:
          'Предлажемо да за самостално истраживање потражите материјал о CFG-у, MST алгоритмима ' +
          'и техникама профилисања. На крају, кратак подсетник термина са ове странице служи као мини појмовник.'
      },
      {
        id: 'zakljucak',
        title: 'Закључак',
        body:
          'Видели смо како се од кода долази до графа, затим до минималног скупа мерења, ' +
          'и коначно до комплетног профила. Притиском на „Заврши“ враћате се на почетну страницу.'
      }
    ];
  }
}
